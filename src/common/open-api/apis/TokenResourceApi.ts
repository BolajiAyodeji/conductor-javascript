/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GenerateTokenRequest,
    GenerateTokenRequestFromJSON,
    GenerateTokenRequestToJSON,
} from '../models';

export interface GenerateTokenOperationRequest {
    generateTokenRequest: GenerateTokenRequest;
}

export interface GetUserInfoRequest {
    principal: string;
}

/**
 * 
 */
export class TokenResourceApi extends runtime.BaseAPI {

    /**
     * Generate JWT with the given access key
     */
    async generateTokenRaw(requestParameters: GenerateTokenOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.generateTokenRequest === null || requestParameters.generateTokenRequest === undefined) {
            throw new runtime.RequiredError('generateTokenRequest','Required parameter requestParameters.generateTokenRequest was null or undefined when calling generateToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateTokenRequestToJSON(requestParameters.generateTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generate JWT with the given access key
     */
    async generateToken(requestParameters: GenerateTokenOperationRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.generateTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the user info from the token
     */
    async getUserInfoRaw(requestParameters: GetUserInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getUserInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.principal !== undefined) {
            queryParameters['principal'] = requestParameters.principal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/token/userInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the user info from the token
     */
    async getUserInfo(requestParameters: GetUserInfoRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
