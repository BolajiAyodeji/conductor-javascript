/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Task,
    TaskFromJSON,
    TaskToJSON,
} from '../models';

export interface GetEventQueuesRequest {
    verbose?: boolean;
}

export interface RequeueSweepRequest {
    workflowId: string;
}

export interface VerifyAndRepairWorkflowConsistencyRequest {
    workflowId: string;
}

export interface ViewRequest {
    tasktype: string;
    start?: number;
    count?: number;
}

/**
 * 
 */
export class AdminResourceApi extends runtime.BaseAPI {

    /**
     * Get registered queues
     */
    async getEventQueuesRaw(requestParameters: GetEventQueuesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        if (requestParameters.verbose !== undefined) {
            queryParameters['verbose'] = requestParameters.verbose;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/admin/queues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get registered queues
     */
    async getEventQueues(requestParameters: GetEventQueuesRequest = {}, initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.getEventQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details of redis usage
     */
    async getRedisUsageRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/admin/redisUsage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get details of redis usage
     */
    async getRedisUsage(initOverrides?: RequestInit): Promise<{ [key: string]: object; }> {
        const response = await this.getRedisUsageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Queue up all the running workflows for sweep
     */
    async requeueSweepRaw(requestParameters: RequeueSweepRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling requeueSweep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/admin/sweep/requeue/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Queue up all the running workflows for sweep
     */
    async requeueSweep(requestParameters: RequeueSweepRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.requeueSweepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify and repair workflow consistency
     */
    async verifyAndRepairWorkflowConsistencyRaw(requestParameters: VerifyAndRepairWorkflowConsistencyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling verifyAndRepairWorkflowConsistency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/admin/consistency/verifyAndRepair/{workflowId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Verify and repair workflow consistency
     */
    async verifyAndRepairWorkflowConsistency(requestParameters: VerifyAndRepairWorkflowConsistencyRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.verifyAndRepairWorkflowConsistencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of pending tasks for a given task type
     */
    async viewRaw(requestParameters: ViewRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters.tasktype === null || requestParameters.tasktype === undefined) {
            throw new runtime.RequiredError('tasktype','Required parameter requestParameters.tasktype was null or undefined when calling view.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/admin/task/{tasktype}`.replace(`{${"tasktype"}}`, encodeURIComponent(String(requestParameters.tasktype))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Get the list of pending tasks for a given task type
     */
    async view(requestParameters: ViewRequest, initOverrides?: RequestInit): Promise<Array<Task>> {
        const response = await this.viewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
