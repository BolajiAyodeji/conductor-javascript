/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConductorApplication,
    ConductorApplicationFromJSON,
    ConductorApplicationToJSON,
    InlineObject12,
    InlineObject12FromJSON,
    InlineObject12ToJSON,
    InlineObject8,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
} from '../models';

export interface AddRoleToApplicationUserRequest {
    applicationId: string;
    role: string;
    body?: string;
}

export interface CreateAccessKeyRequest {
    id: string;
    body?: string;
}

export interface CreateApplicationRequest {
    inlineObject8: InlineObject8;
}

export interface DeleteAccessKeyRequest {
    applicationId: string;
    keyId: string;
    body?: string;
}

export interface DeleteApplicationRequest {
    id: string;
    body?: string;
}

export interface GetAccessKeysRequest {
    id: string;
}

export interface GetApplicationRequest {
    id: string;
}

export interface RemoveRoleFromApplicationUserRequest {
    applicationId: string;
    role: string;
    body?: string;
}

export interface ToggleAccessKeyStatusRequest {
    applicationId: string;
    keyId: string;
    body?: string;
}

export interface UpdateApplicationRequest {
    id: string;
    inlineObject12: InlineObject12;
}

/**
 * 
 */
export class ApplicationResourceApi extends runtime.BaseAPI {

    /**
     */
    async addRoleToApplicationUserRaw(requestParameters: AddRoleToApplicationUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling addRoleToApplicationUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling addRoleToApplicationUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{applicationId}/roles/{role}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async addRoleToApplicationUser(requestParameters: AddRoleToApplicationUserRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.addRoleToApplicationUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an access key for an application
     */
    async createAccessKeyRaw(requestParameters: CreateAccessKeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createAccessKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{id}/accessKeys`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create an access key for an application
     */
    async createAccessKey(requestParameters: CreateAccessKeyRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.createAccessKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an application
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject8 === null || requestParameters.inlineObject8 === undefined) {
            throw new runtime.RequiredError('inlineObject8','Required parameter requestParameters.inlineObject8 was null or undefined when calling createApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject8ToJSON(requestParameters.inlineObject8),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create an application
     */
    async createApplication(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.createApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an access key
     */
    async deleteAccessKeyRaw(requestParameters: DeleteAccessKeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling deleteAccessKey.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling deleteAccessKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{applicationId}/accessKeys/{keyId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an access key
     */
    async deleteAccessKey(requestParameters: DeleteAccessKeyRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.deleteAccessKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an application
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an application
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.deleteApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get application\'s access keys
     */
    async getAccessKeysRaw(requestParameters: GetAccessKeysRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccessKeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{id}/accessKeys`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get application\'s access keys
     */
    async getAccessKeys(requestParameters: GetAccessKeysRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getAccessKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an application by id
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get an application by id
     */
    async getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all applications
     */
    async listApplicationsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ConductorApplication>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConductorApplicationFromJSON));
    }

    /**
     * Get all applications
     */
    async listApplications(initOverrides?: RequestInit): Promise<Array<ConductorApplication>> {
        const response = await this.listApplicationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeRoleFromApplicationUserRaw(requestParameters: RemoveRoleFromApplicationUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling removeRoleFromApplicationUser.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling removeRoleFromApplicationUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{applicationId}/roles/{role}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async removeRoleFromApplicationUser(requestParameters: RemoveRoleFromApplicationUserRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.removeRoleFromApplicationUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle the status of an access key
     */
    async toggleAccessKeyStatusRaw(requestParameters: ToggleAccessKeyStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling toggleAccessKeyStatus.');
        }

        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
            throw new runtime.RequiredError('keyId','Required parameter requestParameters.keyId was null or undefined when calling toggleAccessKeyStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{applicationId}/accessKeys/{keyId}/status`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"keyId"}}`, encodeURIComponent(String(requestParameters.keyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Toggle the status of an access key
     */
    async toggleAccessKeyStatus(requestParameters: ToggleAccessKeyStatusRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.toggleAccessKeyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an application
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplication.');
        }

        if (requestParameters.inlineObject12 === null || requestParameters.inlineObject12 === undefined) {
            throw new runtime.RequiredError('inlineObject12','Required parameter requestParameters.inlineObject12 was null or undefined when calling updateApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject12ToJSON(requestParameters.inlineObject12),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update an application
     */
    async updateApplication(requestParameters: UpdateApplicationRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.updateApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
