/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkResponse,
    BulkResponseFromJSON,
    BulkResponseToJSON,
} from '../models';

export interface PauseWorkflow1Request {
    requestBody: Array<string>;
}

export interface Restart1Request {
    requestBody: Array<string>;
    useLatestDefinitions?: boolean;
}

export interface ResumeWorkflow1Request {
    requestBody: Array<string>;
}

export interface RetryRequest {
    requestBody: Array<string>;
}

export interface TerminateRequest {
    requestBody: Array<string>;
    reason?: string;
}

/**
 * 
 */
export class WorkflowBulkResourceApi extends runtime.BaseAPI {

    /**
     * Pause the list of workflows
     */
    async pauseWorkflow1Raw(requestParameters: PauseWorkflow1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling pauseWorkflow1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/workflow/bulk/pause`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkResponseFromJSON(jsonValue));
    }

    /**
     * Pause the list of workflows
     */
    async pauseWorkflow1(requestParameters: PauseWorkflow1Request, initOverrides?: RequestInit): Promise<BulkResponse> {
        const response = await this.pauseWorkflow1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restart the list of completed workflow
     */
    async restart1Raw(requestParameters: Restart1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling restart1.');
        }

        const queryParameters: any = {};

        if (requestParameters.useLatestDefinitions !== undefined) {
            queryParameters['useLatestDefinitions'] = requestParameters.useLatestDefinitions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/workflow/bulk/restart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkResponseFromJSON(jsonValue));
    }

    /**
     * Restart the list of completed workflow
     */
    async restart1(requestParameters: Restart1Request, initOverrides?: RequestInit): Promise<BulkResponse> {
        const response = await this.restart1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resume the list of workflows
     */
    async resumeWorkflow1Raw(requestParameters: ResumeWorkflow1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling resumeWorkflow1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/workflow/bulk/resume`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkResponseFromJSON(jsonValue));
    }

    /**
     * Resume the list of workflows
     */
    async resumeWorkflow1(requestParameters: ResumeWorkflow1Request, initOverrides?: RequestInit): Promise<BulkResponse> {
        const response = await this.resumeWorkflow1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry the last failed task for each workflow from the list
     */
    async retryRaw(requestParameters: RetryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling retry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/workflow/bulk/retry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkResponseFromJSON(jsonValue));
    }

    /**
     * Retry the last failed task for each workflow from the list
     */
    async retry(requestParameters: RetryRequest, initOverrides?: RequestInit): Promise<BulkResponse> {
        const response = await this.retryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminate workflows execution
     */
    async terminateRaw(requestParameters: TerminateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BulkResponse>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling terminate.');
        }

        const queryParameters: any = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/workflow/bulk/terminate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkResponseFromJSON(jsonValue));
    }

    /**
     * Terminate workflows execution
     */
    async terminate(requestParameters: TerminateRequest, initOverrides?: RequestInit): Promise<BulkResponse> {
        const response = await this.terminateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
