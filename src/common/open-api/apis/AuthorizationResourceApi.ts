/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
} from '../models';

export interface GetPermissionsRequest {
    type: string;
    id: string;
}

export interface GrantPermissionsRequest {
    inlineObject5: InlineObject5;
}

export interface RemovePermissionsRequest {
    inlineObject6: InlineObject6;
}

/**
 * 
 */
export class AuthorizationResourceApi extends runtime.BaseAPI {

    /**
     * Get the access that have been granted over the given object
     */
    async getPermissionsRaw(requestParameters: GetPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getPermissions.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/auth/authorization/{type}/{id}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the access that have been granted over the given object
     */
    async getPermissions(requestParameters: GetPermissionsRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant access to a user over the target
     */
    async grantPermissionsRaw(requestParameters: GrantPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject5 === null || requestParameters.inlineObject5 === undefined) {
            throw new runtime.RequiredError('inlineObject5','Required parameter requestParameters.inlineObject5 was null or undefined when calling grantPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/auth/authorization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.inlineObject5),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Grant access to a user over the target
     */
    async grantPermissions(requestParameters: GrantPermissionsRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.grantPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove user\'s access over the target
     */
    async removePermissionsRaw(requestParameters: RemovePermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject6 === null || requestParameters.inlineObject6 === undefined) {
            throw new runtime.RequiredError('inlineObject6','Required parameter requestParameters.inlineObject6 was null or undefined when calling removePermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/auth/authorization`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.inlineObject6),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove user\'s access over the target
     */
    async removePermissions(requestParameters: RemovePermissionsRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.removePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
