/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    TaskDef,
    TaskDefFromJSON,
    TaskDefToJSON,
    WorkflowDef,
    WorkflowDefFromJSON,
    WorkflowDefToJSON,
} from '../models';

export interface CreateRequest {
    inlineObject4: InlineObject4;
}

export interface GetRequest {
    name: string;
    version?: number;
}

export interface GetAllWorkflowsRequest {
    access?: string;
}

export interface GetTaskDefRequest {
    tasktype: string;
}

export interface GetTaskDefsRequest {
    access?: string;
}

export interface RegisterTaskDefRequest {
    inlineObject1: InlineObject1;
}

export interface UnregisterTaskDefRequest {
    tasktype: string;
}

export interface UnregisterWorkflowDefRequest {
    name: string;
    version: number;
}

export interface UpdateRequest {
    inlineObject3: InlineObject3;
}

export interface UpdateTaskDefRequest {
    inlineObject: InlineObject;
}

/**
 * 
 */
export class MetadataResourceApi extends runtime.BaseAPI {

    /**
     * Create a new workflow definition
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject4 === null || requestParameters.inlineObject4 === undefined) {
            throw new runtime.RequiredError('inlineObject4','Required parameter requestParameters.inlineObject4 was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/workflow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.inlineObject4),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a new workflow definition
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves workflow definition along with blueprint
     */
    async getRaw(requestParameters: GetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WorkflowDef>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/workflow/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefFromJSON(jsonValue));
    }

    /**
     * Retrieves workflow definition along with blueprint
     */
    async get(requestParameters: GetRequest, initOverrides?: RequestInit): Promise<WorkflowDef> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all workflow definition along with blueprint
     */
    async getAllWorkflowsRaw(requestParameters: GetAllWorkflowsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<WorkflowDef>>> {
        const queryParameters: any = {};

        if (requestParameters.access !== undefined) {
            queryParameters['access'] = requestParameters.access;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/workflow`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowDefFromJSON));
    }

    /**
     * Retrieves all workflow definition along with blueprint
     */
    async getAllWorkflows(requestParameters: GetAllWorkflowsRequest = {}, initOverrides?: RequestInit): Promise<Array<WorkflowDef>> {
        const response = await this.getAllWorkflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the task definition
     */
    async getTaskDefRaw(requestParameters: GetTaskDefRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskDef>> {
        if (requestParameters.tasktype === null || requestParameters.tasktype === undefined) {
            throw new runtime.RequiredError('tasktype','Required parameter requestParameters.tasktype was null or undefined when calling getTaskDef.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/taskdefs/{tasktype}`.replace(`{${"tasktype"}}`, encodeURIComponent(String(requestParameters.tasktype))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDefFromJSON(jsonValue));
    }

    /**
     * Gets the task definition
     */
    async getTaskDef(requestParameters: GetTaskDefRequest, initOverrides?: RequestInit): Promise<TaskDef> {
        const response = await this.getTaskDefRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all task definition
     */
    async getTaskDefsRaw(requestParameters: GetTaskDefsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TaskDef>>> {
        const queryParameters: any = {};

        if (requestParameters.access !== undefined) {
            queryParameters['access'] = requestParameters.access;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/taskdefs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskDefFromJSON));
    }

    /**
     * Gets all task definition
     */
    async getTaskDefs(requestParameters: GetTaskDefsRequest = {}, initOverrides?: RequestInit): Promise<Array<TaskDef>> {
        const response = await this.getTaskDefsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update task definition(s)
     */
    async registerTaskDefRaw(requestParameters: RegisterTaskDefRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject1 === null || requestParameters.inlineObject1 === undefined) {
            throw new runtime.RequiredError('inlineObject1','Required parameter requestParameters.inlineObject1 was null or undefined when calling registerTaskDef.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/taskdefs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create or update task definition(s)
     */
    async registerTaskDef(requestParameters: RegisterTaskDefRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.registerTaskDefRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a task definition
     */
    async unregisterTaskDefRaw(requestParameters: UnregisterTaskDefRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tasktype === null || requestParameters.tasktype === undefined) {
            throw new runtime.RequiredError('tasktype','Required parameter requestParameters.tasktype was null or undefined when calling unregisterTaskDef.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/taskdefs/{tasktype}`.replace(`{${"tasktype"}}`, encodeURIComponent(String(requestParameters.tasktype))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a task definition
     */
    async unregisterTaskDef(requestParameters: UnregisterTaskDefRequest, initOverrides?: RequestInit): Promise<void> {
        await this.unregisterTaskDefRaw(requestParameters, initOverrides);
    }

    /**
     * Removes workflow definition. It does not remove workflows associated with the definition.
     */
    async unregisterWorkflowDefRaw(requestParameters: UnregisterWorkflowDefRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling unregisterWorkflowDef.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling unregisterWorkflowDef.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/workflow/{name}/{version}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes workflow definition. It does not remove workflows associated with the definition.
     */
    async unregisterWorkflowDef(requestParameters: UnregisterWorkflowDefRequest, initOverrides?: RequestInit): Promise<void> {
        await this.unregisterWorkflowDefRaw(requestParameters, initOverrides);
    }

    /**
     * Create or update workflow definition(s)
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
            throw new runtime.RequiredError('inlineObject3','Required parameter requestParameters.inlineObject3 was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/workflow`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.inlineObject3),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create or update workflow definition(s)
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing task
     */
    async updateTaskDefRaw(requestParameters: UpdateTaskDefRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling updateTaskDef.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/metadata/taskdefs`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update an existing task
     */
    async updateTaskDef(requestParameters: UpdateTaskDefRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.updateTaskDefRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
