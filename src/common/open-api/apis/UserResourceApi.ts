/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConductorUser,
    ConductorUserFromJSON,
    ConductorUserToJSON,
    InlineObject11,
    InlineObject11FromJSON,
    InlineObject11ToJSON,
} from '../models';

export interface DeleteUserRequest {
    id: string;
    body?: string;
}

export interface GetGrantedPermissions1Request {
    userId: string;
}

export interface GetUserRequest {
    principal: string;
    id: string;
}

export interface ListUsersRequest {
    apps?: boolean;
}

export interface UpsertUserRequest {
    id: string;
    inlineObject11: InlineObject11;
}

/**
 * 
 */
export class UserResourceApi extends runtime.BaseAPI {

    /**
     * Delete a user
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a user
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the permissions this user has over workflows and tasks
     */
    async getGrantedPermissions1Raw(requestParameters: GetGrantedPermissions1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getGrantedPermissions1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/users/{userId}/permissions`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the permissions this user has over workflows and tasks
     */
    async getGrantedPermissions1(requestParameters: GetGrantedPermissions1Request, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getGrantedPermissions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user by id
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.principal === null || requestParameters.principal === undefined) {
            throw new runtime.RequiredError('principal','Required parameter requestParameters.principal was null or undefined when calling getUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.principal !== undefined) {
            queryParameters['principal'] = requestParameters.principal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a user by id
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ConductorUser>>> {
        const queryParameters: any = {};

        if (requestParameters.apps !== undefined) {
            queryParameters['apps'] = requestParameters.apps;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConductorUserFromJSON));
    }

    /**
     * Get all users
     */
    async listUsers(requestParameters: ListUsersRequest = {}, initOverrides?: RequestInit): Promise<Array<ConductorUser>> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a user
     */
    async upsertUserRaw(requestParameters: UpsertUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling upsertUser.');
        }

        if (requestParameters.inlineObject11 === null || requestParameters.inlineObject11 === undefined) {
            throw new runtime.RequiredError('inlineObject11','Required parameter requestParameters.inlineObject11 was null or undefined when calling upsertUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Authorization"] = this.configuration.apiKey("X-Authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject11ToJSON(requestParameters.inlineObject11),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create or update a user
     */
    async upsertUser(requestParameters: UpsertUserRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.upsertUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
