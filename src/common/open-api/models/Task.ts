/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TaskDef,
    TaskDefFromJSON,
    TaskDefFromJSONTyped,
    TaskDefToJSON,
} from './TaskDef';
import {
    WorkflowTask,
    WorkflowTaskFromJSON,
    WorkflowTaskFromJSONTyped,
    WorkflowTaskToJSON,
} from './WorkflowTask';

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    taskType?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    status?: TaskStatusEnum;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Task
     */
    inputData?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    referenceTaskName?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    retryCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    seq?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    correlationId?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    pollCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    taskDefName?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    scheduledTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    startTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    endTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    updateTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    startDelayInSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    retriedTaskId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    retried?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    executed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    callbackFromWorker?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    responseTimeoutSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    workflowInstanceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    workflowType?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    reasonForIncompletion?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    callbackAfterSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    workerId?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Task
     */
    outputData?: { [key: string]: object; };
    /**
     * 
     * @type {WorkflowTask}
     * @memberof Task
     */
    workflowTask?: WorkflowTask;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    domain?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    rateLimitPerFrequency?: number;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    rateLimitFrequencyInSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    externalInputPayloadStoragePath?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    externalOutputPayloadStoragePath?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    workflowPriority?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    executionNameSpace?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    isolationGroupId?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    iteration?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    subWorkflowId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    subworkflowChanged?: boolean;
    /**
     * 
     * @type {TaskDef}
     * @memberof Task
     */
    taskDefinition?: TaskDef;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    queueWaitTime?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    loopOverTask?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum TaskStatusEnum {
    InProgress = 'IN_PROGRESS',
    Canceled = 'CANCELED',
    Failed = 'FAILED',
    FailedWithTerminalError = 'FAILED_WITH_TERMINAL_ERROR',
    Completed = 'COMPLETED',
    CompletedWithErrors = 'COMPLETED_WITH_ERRORS',
    Scheduled = 'SCHEDULED',
    TimedOut = 'TIMED_OUT',
    Skipped = 'SKIPPED'
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskType': !exists(json, 'taskType') ? undefined : json['taskType'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'inputData': !exists(json, 'inputData') ? undefined : json['inputData'],
        'referenceTaskName': !exists(json, 'referenceTaskName') ? undefined : json['referenceTaskName'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'seq': !exists(json, 'seq') ? undefined : json['seq'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'pollCount': !exists(json, 'pollCount') ? undefined : json['pollCount'],
        'taskDefName': !exists(json, 'taskDefName') ? undefined : json['taskDefName'],
        'scheduledTime': !exists(json, 'scheduledTime') ? undefined : json['scheduledTime'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'updateTime': !exists(json, 'updateTime') ? undefined : json['updateTime'],
        'startDelayInSeconds': !exists(json, 'startDelayInSeconds') ? undefined : json['startDelayInSeconds'],
        'retriedTaskId': !exists(json, 'retriedTaskId') ? undefined : json['retriedTaskId'],
        'retried': !exists(json, 'retried') ? undefined : json['retried'],
        'executed': !exists(json, 'executed') ? undefined : json['executed'],
        'callbackFromWorker': !exists(json, 'callbackFromWorker') ? undefined : json['callbackFromWorker'],
        'responseTimeoutSeconds': !exists(json, 'responseTimeoutSeconds') ? undefined : json['responseTimeoutSeconds'],
        'workflowInstanceId': !exists(json, 'workflowInstanceId') ? undefined : json['workflowInstanceId'],
        'workflowType': !exists(json, 'workflowType') ? undefined : json['workflowType'],
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'reasonForIncompletion': !exists(json, 'reasonForIncompletion') ? undefined : json['reasonForIncompletion'],
        'callbackAfterSeconds': !exists(json, 'callbackAfterSeconds') ? undefined : json['callbackAfterSeconds'],
        'workerId': !exists(json, 'workerId') ? undefined : json['workerId'],
        'outputData': !exists(json, 'outputData') ? undefined : json['outputData'],
        'workflowTask': !exists(json, 'workflowTask') ? undefined : WorkflowTaskFromJSON(json['workflowTask']),
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'rateLimitPerFrequency': !exists(json, 'rateLimitPerFrequency') ? undefined : json['rateLimitPerFrequency'],
        'rateLimitFrequencyInSeconds': !exists(json, 'rateLimitFrequencyInSeconds') ? undefined : json['rateLimitFrequencyInSeconds'],
        'externalInputPayloadStoragePath': !exists(json, 'externalInputPayloadStoragePath') ? undefined : json['externalInputPayloadStoragePath'],
        'externalOutputPayloadStoragePath': !exists(json, 'externalOutputPayloadStoragePath') ? undefined : json['externalOutputPayloadStoragePath'],
        'workflowPriority': !exists(json, 'workflowPriority') ? undefined : json['workflowPriority'],
        'executionNameSpace': !exists(json, 'executionNameSpace') ? undefined : json['executionNameSpace'],
        'isolationGroupId': !exists(json, 'isolationGroupId') ? undefined : json['isolationGroupId'],
        'iteration': !exists(json, 'iteration') ? undefined : json['iteration'],
        'subWorkflowId': !exists(json, 'subWorkflowId') ? undefined : json['subWorkflowId'],
        'subworkflowChanged': !exists(json, 'subworkflowChanged') ? undefined : json['subworkflowChanged'],
        'taskDefinition': !exists(json, 'taskDefinition') ? undefined : TaskDefFromJSON(json['taskDefinition']),
        'queueWaitTime': !exists(json, 'queueWaitTime') ? undefined : json['queueWaitTime'],
        'loopOverTask': !exists(json, 'loopOverTask') ? undefined : json['loopOverTask'],
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskType': value.taskType,
        'status': value.status,
        'inputData': value.inputData,
        'referenceTaskName': value.referenceTaskName,
        'retryCount': value.retryCount,
        'seq': value.seq,
        'correlationId': value.correlationId,
        'pollCount': value.pollCount,
        'taskDefName': value.taskDefName,
        'scheduledTime': value.scheduledTime,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'updateTime': value.updateTime,
        'startDelayInSeconds': value.startDelayInSeconds,
        'retriedTaskId': value.retriedTaskId,
        'retried': value.retried,
        'executed': value.executed,
        'callbackFromWorker': value.callbackFromWorker,
        'responseTimeoutSeconds': value.responseTimeoutSeconds,
        'workflowInstanceId': value.workflowInstanceId,
        'workflowType': value.workflowType,
        'taskId': value.taskId,
        'reasonForIncompletion': value.reasonForIncompletion,
        'callbackAfterSeconds': value.callbackAfterSeconds,
        'workerId': value.workerId,
        'outputData': value.outputData,
        'workflowTask': WorkflowTaskToJSON(value.workflowTask),
        'domain': value.domain,
        'rateLimitPerFrequency': value.rateLimitPerFrequency,
        'rateLimitFrequencyInSeconds': value.rateLimitFrequencyInSeconds,
        'externalInputPayloadStoragePath': value.externalInputPayloadStoragePath,
        'externalOutputPayloadStoragePath': value.externalOutputPayloadStoragePath,
        'workflowPriority': value.workflowPriority,
        'executionNameSpace': value.executionNameSpace,
        'isolationGroupId': value.isolationGroupId,
        'iteration': value.iteration,
        'subWorkflowId': value.subWorkflowId,
        'subworkflowChanged': value.subworkflowChanged,
        'taskDefinition': TaskDefToJSON(value.taskDefinition),
        'queueWaitTime': value.queueWaitTime,
        'loopOverTask': value.loopOverTask,
    };
}

