/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StartWorkflowRequest,
    StartWorkflowRequestFromJSON,
    StartWorkflowRequestFromJSONTyped,
    StartWorkflowRequestToJSON,
} from './StartWorkflowRequest';

/**
 * 
 * @export
 * @interface WorkflowScheduleExecutionModel
 */
export interface WorkflowScheduleExecutionModel {
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    executionId?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    scheduleName?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkflowScheduleExecutionModel
     */
    scheduledTime?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowScheduleExecutionModel
     */
    executionTime?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    workflowName?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    workflowId?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    stackTrace?: string;
    /**
     * 
     * @type {StartWorkflowRequest}
     * @memberof WorkflowScheduleExecutionModel
     */
    startWorkflowRequest?: StartWorkflowRequest;
    /**
     * 
     * @type {string}
     * @memberof WorkflowScheduleExecutionModel
     */
    state?: WorkflowScheduleExecutionModelStateEnum;
}

/**
* @export
* @enum {string}
*/
export enum WorkflowScheduleExecutionModelStateEnum {
    Polled = 'POLLED',
    Failed = 'FAILED',
    Executed = 'EXECUTED'
}

export function WorkflowScheduleExecutionModelFromJSON(json: any): WorkflowScheduleExecutionModel {
    return WorkflowScheduleExecutionModelFromJSONTyped(json, false);
}

export function WorkflowScheduleExecutionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowScheduleExecutionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'executionId': !exists(json, 'executionId') ? undefined : json['executionId'],
        'scheduleName': !exists(json, 'scheduleName') ? undefined : json['scheduleName'],
        'scheduledTime': !exists(json, 'scheduledTime') ? undefined : json['scheduledTime'],
        'executionTime': !exists(json, 'executionTime') ? undefined : json['executionTime'],
        'workflowName': !exists(json, 'workflowName') ? undefined : json['workflowName'],
        'workflowId': !exists(json, 'workflowId') ? undefined : json['workflowId'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'stackTrace': !exists(json, 'stackTrace') ? undefined : json['stackTrace'],
        'startWorkflowRequest': !exists(json, 'startWorkflowRequest') ? undefined : StartWorkflowRequestFromJSON(json['startWorkflowRequest']),
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function WorkflowScheduleExecutionModelToJSON(value?: WorkflowScheduleExecutionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'executionId': value.executionId,
        'scheduleName': value.scheduleName,
        'scheduledTime': value.scheduledTime,
        'executionTime': value.executionTime,
        'workflowName': value.workflowName,
        'workflowId': value.workflowId,
        'reason': value.reason,
        'stackTrace': value.stackTrace,
        'startWorkflowRequest': StartWorkflowRequestToJSON(value.startWorkflowRequest),
        'state': value.state,
    };
}

