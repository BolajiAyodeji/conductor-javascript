/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SubWorkflowParams,
    SubWorkflowParamsFromJSON,
    SubWorkflowParamsFromJSONTyped,
    SubWorkflowParamsToJSON,
} from './SubWorkflowParams';
import {
    TaskDef,
    TaskDefFromJSON,
    TaskDefFromJSONTyped,
    TaskDefToJSON,
} from './TaskDef';

/**
 * 
 * @export
 * @interface WorkflowTask
 */
export interface WorkflowTask {
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    taskReferenceName: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof WorkflowTask
     */
    inputParameters?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    dynamicTaskNameParam?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    caseValueParam?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    caseExpression?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    scriptExpression?: string;
    /**
     * 
     * @type {{ [key: string]: Array<WorkflowTask>; }}
     * @memberof WorkflowTask
     */
    decisionCases?: { [key: string]: Array<WorkflowTask>; };
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    dynamicForkJoinTasksParam?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    dynamicForkTasksParam?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    dynamicForkTasksInputParamName?: string;
    /**
     * 
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    defaultCase?: Array<WorkflowTask>;
    /**
     * 
     * @type {Array<Array<WorkflowTask>>}
     * @memberof WorkflowTask
     */
    forkTasks?: Array<Array<WorkflowTask>>;
    /**
     * 
     * @type {number}
     * @memberof WorkflowTask
     */
    startDelay?: number;
    /**
     * 
     * @type {SubWorkflowParams}
     * @memberof WorkflowTask
     */
    subWorkflowParam?: SubWorkflowParams;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowTask
     */
    joinOn?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    sink?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTask
     */
    optional?: boolean;
    /**
     * 
     * @type {TaskDef}
     * @memberof WorkflowTask
     */
    taskDefinition?: TaskDef;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTask
     */
    rateLimited?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkflowTask
     */
    defaultExclusiveJoinTask?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowTask
     */
    asyncComplete?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    loopCondition?: string;
    /**
     * 
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    loopOver?: Array<WorkflowTask>;
    /**
     * 
     * @type {number}
     * @memberof WorkflowTask
     */
    retryCount?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    evaluatorType?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    expression?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    workflowTaskType?: WorkflowTaskWorkflowTaskTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum WorkflowTaskWorkflowTaskTypeEnum {
    Simple = 'SIMPLE',
    Dynamic = 'DYNAMIC',
    ForkJoin = 'FORK_JOIN',
    ForkJoinDynamic = 'FORK_JOIN_DYNAMIC',
    Decision = 'DECISION',
    Switch = 'SWITCH',
    Join = 'JOIN',
    DoWhile = 'DO_WHILE',
    SubWorkflow = 'SUB_WORKFLOW',
    Event = 'EVENT',
    Wait = 'WAIT',
    UserDefined = 'USER_DEFINED',
    Http = 'HTTP',
    Lambda = 'LAMBDA',
    Inline = 'INLINE',
    ExclusiveJoin = 'EXCLUSIVE_JOIN',
    Terminate = 'TERMINATE',
    KafkaPublish = 'KAFKA_PUBLISH',
    JsonJqTransform = 'JSON_JQ_TRANSFORM',
    SetVariable = 'SET_VARIABLE'
}

export function WorkflowTaskFromJSON(json: any): WorkflowTask {
    return WorkflowTaskFromJSONTyped(json, false);
}

export function WorkflowTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'taskReferenceName': json['taskReferenceName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'inputParameters': !exists(json, 'inputParameters') ? undefined : json['inputParameters'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'dynamicTaskNameParam': !exists(json, 'dynamicTaskNameParam') ? undefined : json['dynamicTaskNameParam'],
        'caseValueParam': !exists(json, 'caseValueParam') ? undefined : json['caseValueParam'],
        'caseExpression': !exists(json, 'caseExpression') ? undefined : json['caseExpression'],
        'scriptExpression': !exists(json, 'scriptExpression') ? undefined : json['scriptExpression'],
        'decisionCases': !exists(json, 'decisionCases') ? undefined : json['decisionCases'],
        'dynamicForkJoinTasksParam': !exists(json, 'dynamicForkJoinTasksParam') ? undefined : json['dynamicForkJoinTasksParam'],
        'dynamicForkTasksParam': !exists(json, 'dynamicForkTasksParam') ? undefined : json['dynamicForkTasksParam'],
        'dynamicForkTasksInputParamName': !exists(json, 'dynamicForkTasksInputParamName') ? undefined : json['dynamicForkTasksInputParamName'],
        'defaultCase': !exists(json, 'defaultCase') ? undefined : ((json['defaultCase'] as Array<any>).map(WorkflowTaskFromJSON)),
        'forkTasks': !exists(json, 'forkTasks') ? undefined : json['forkTasks'],
        'startDelay': !exists(json, 'startDelay') ? undefined : json['startDelay'],
        'subWorkflowParam': !exists(json, 'subWorkflowParam') ? undefined : SubWorkflowParamsFromJSON(json['subWorkflowParam']),
        'joinOn': !exists(json, 'joinOn') ? undefined : json['joinOn'],
        'sink': !exists(json, 'sink') ? undefined : json['sink'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
        'taskDefinition': !exists(json, 'taskDefinition') ? undefined : TaskDefFromJSON(json['taskDefinition']),
        'rateLimited': !exists(json, 'rateLimited') ? undefined : json['rateLimited'],
        'defaultExclusiveJoinTask': !exists(json, 'defaultExclusiveJoinTask') ? undefined : json['defaultExclusiveJoinTask'],
        'asyncComplete': !exists(json, 'asyncComplete') ? undefined : json['asyncComplete'],
        'loopCondition': !exists(json, 'loopCondition') ? undefined : json['loopCondition'],
        'loopOver': !exists(json, 'loopOver') ? undefined : ((json['loopOver'] as Array<any>).map(WorkflowTaskFromJSON)),
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'evaluatorType': !exists(json, 'evaluatorType') ? undefined : json['evaluatorType'],
        'expression': !exists(json, 'expression') ? undefined : json['expression'],
        'workflowTaskType': !exists(json, 'workflowTaskType') ? undefined : json['workflowTaskType'],
    };
}

export function WorkflowTaskToJSON(value?: WorkflowTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'taskReferenceName': value.taskReferenceName,
        'description': value.description,
        'inputParameters': value.inputParameters,
        'type': value.type,
        'dynamicTaskNameParam': value.dynamicTaskNameParam,
        'caseValueParam': value.caseValueParam,
        'caseExpression': value.caseExpression,
        'scriptExpression': value.scriptExpression,
        'decisionCases': value.decisionCases,
        'dynamicForkJoinTasksParam': value.dynamicForkJoinTasksParam,
        'dynamicForkTasksParam': value.dynamicForkTasksParam,
        'dynamicForkTasksInputParamName': value.dynamicForkTasksInputParamName,
        'defaultCase': value.defaultCase === undefined ? undefined : ((value.defaultCase as Array<any>).map(WorkflowTaskToJSON)),
        'forkTasks': value.forkTasks,
        'startDelay': value.startDelay,
        'subWorkflowParam': SubWorkflowParamsToJSON(value.subWorkflowParam),
        'joinOn': value.joinOn,
        'sink': value.sink,
        'optional': value.optional,
        'taskDefinition': TaskDefToJSON(value.taskDefinition),
        'rateLimited': value.rateLimited,
        'defaultExclusiveJoinTask': value.defaultExclusiveJoinTask,
        'asyncComplete': value.asyncComplete,
        'loopCondition': value.loopCondition,
        'loopOver': value.loopOver === undefined ? undefined : ((value.loopOver as Array<any>).map(WorkflowTaskToJSON)),
        'retryCount': value.retryCount,
        'evaluatorType': value.evaluatorType,
        'expression': value.expression,
        'workflowTaskType': value.workflowTaskType,
    };
}

