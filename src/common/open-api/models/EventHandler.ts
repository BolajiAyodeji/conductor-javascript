/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Action,
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';

/**
 * 
 * @export
 * @interface EventHandler
 */
export interface EventHandler {
    /**
     * 
     * @type {string}
     * @memberof EventHandler
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EventHandler
     */
    event: string;
    /**
     * 
     * @type {string}
     * @memberof EventHandler
     */
    condition?: string;
    /**
     * 
     * @type {Array<Action>}
     * @memberof EventHandler
     */
    actions: Array<Action>;
    /**
     * 
     * @type {boolean}
     * @memberof EventHandler
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EventHandler
     */
    evaluatorType?: string;
}

export function EventHandlerFromJSON(json: any): EventHandler {
    return EventHandlerFromJSONTyped(json, false);
}

export function EventHandlerFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventHandler {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'event': json['event'],
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'actions': ((json['actions'] as Array<any>).map(ActionFromJSON)),
        'active': !exists(json, 'active') ? undefined : json['active'],
        'evaluatorType': !exists(json, 'evaluatorType') ? undefined : json['evaluatorType'],
    };
}

export function EventHandlerToJSON(value?: EventHandler | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'event': value.event,
        'condition': value.condition,
        'actions': ((value.actions as Array<any>).map(ActionToJSON)),
        'active': value.active,
        'evaluatorType': value.evaluatorType,
    };
}

