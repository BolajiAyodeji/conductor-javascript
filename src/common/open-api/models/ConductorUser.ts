/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Group,
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
} from './Group';
import {
    Role,
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';

/**
 * 
 * @export
 * @interface ConductorUser
 */
export interface ConductorUser {
    /**
     * 
     * @type {string}
     * @memberof ConductorUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ConductorUser
     */
    name?: string;
    /**
     * 
     * @type {Set<Role>}
     * @memberof ConductorUser
     */
    roles?: Set<Role>;
    /**
     * 
     * @type {Set<Group>}
     * @memberof ConductorUser
     */
    groups?: Set<Group>;
    /**
     * 
     * @type {string}
     * @memberof ConductorUser
     */
    uuid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConductorUser
     */
    applicationUser?: boolean;
}

export function ConductorUserFromJSON(json: any): ConductorUser {
    return ConductorUserFromJSONTyped(json, false);
}

export function ConductorUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConductorUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'roles': !exists(json, 'roles') ? undefined : (new Set((json['roles'] as Array<any>).map(RoleFromJSON))),
        'groups': !exists(json, 'groups') ? undefined : (new Set((json['groups'] as Array<any>).map(GroupFromJSON))),
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'applicationUser': !exists(json, 'applicationUser') ? undefined : json['applicationUser'],
    };
}

export function ConductorUserToJSON(value?: ConductorUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'roles': value.roles === undefined ? undefined : (Array.from(value.roles as Set<any>).map(RoleToJSON)),
        'groups': value.groups === undefined ? undefined : (Array.from(value.groups as Set<any>).map(GroupToJSON)),
        'uuid': value.uuid,
        'applicationUser': value.applicationUser,
    };
}

