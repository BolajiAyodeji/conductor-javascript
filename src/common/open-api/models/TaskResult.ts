/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TaskExecLog,
    TaskExecLogFromJSON,
    TaskExecLogFromJSONTyped,
    TaskExecLogToJSON,
} from './TaskExecLog';

/**
 * 
 * @export
 * @interface TaskResult
 */
export interface TaskResult {
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    workflowInstanceId: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    taskId: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    reasonForIncompletion?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskResult
     */
    callbackAfterSeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    workerId?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    status?: TaskResultStatusEnum;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TaskResult
     */
    outputData?: { [key: string]: object; };
    /**
     * 
     * @type {Array<TaskExecLog>}
     * @memberof TaskResult
     */
    logs?: Array<TaskExecLog>;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    externalOutputPayloadStoragePath?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResult
     */
    subWorkflowId?: string;
}

/**
* @export
* @enum {string}
*/
export enum TaskResultStatusEnum {
    InProgress = 'IN_PROGRESS',
    Failed = 'FAILED',
    FailedWithTerminalError = 'FAILED_WITH_TERMINAL_ERROR',
    Completed = 'COMPLETED'
}

export function TaskResultFromJSON(json: any): TaskResult {
    return TaskResultFromJSONTyped(json, false);
}

export function TaskResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workflowInstanceId': json['workflowInstanceId'],
        'taskId': json['taskId'],
        'reasonForIncompletion': !exists(json, 'reasonForIncompletion') ? undefined : json['reasonForIncompletion'],
        'callbackAfterSeconds': !exists(json, 'callbackAfterSeconds') ? undefined : json['callbackAfterSeconds'],
        'workerId': !exists(json, 'workerId') ? undefined : json['workerId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'outputData': !exists(json, 'outputData') ? undefined : json['outputData'],
        'logs': !exists(json, 'logs') ? undefined : ((json['logs'] as Array<any>).map(TaskExecLogFromJSON)),
        'externalOutputPayloadStoragePath': !exists(json, 'externalOutputPayloadStoragePath') ? undefined : json['externalOutputPayloadStoragePath'],
        'subWorkflowId': !exists(json, 'subWorkflowId') ? undefined : json['subWorkflowId'],
    };
}

export function TaskResultToJSON(value?: TaskResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workflowInstanceId': value.workflowInstanceId,
        'taskId': value.taskId,
        'reasonForIncompletion': value.reasonForIncompletion,
        'callbackAfterSeconds': value.callbackAfterSeconds,
        'workerId': value.workerId,
        'status': value.status,
        'outputData': value.outputData,
        'logs': value.logs === undefined ? undefined : ((value.logs as Array<any>).map(TaskExecLogToJSON)),
        'externalOutputPayloadStoragePath': value.externalOutputPayloadStoragePath,
        'subWorkflowId': value.subWorkflowId,
    };
}

