/* tslint:disable */
/* eslint-disable */
/**
 * Conductor API Server
 * Conductor API Server
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Task,
    TaskFromJSON,
    TaskFromJSONTyped,
    TaskToJSON,
} from './Task';
import {
    WorkflowDef,
    WorkflowDefFromJSON,
    WorkflowDefFromJSONTyped,
    WorkflowDefToJSON,
} from './WorkflowDef';

/**
 * 
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    ownerApp?: string;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    createTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    updateTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    status?: WorkflowStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    endTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    workflowId?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    parentWorkflowId?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    parentWorkflowTaskId?: string;
    /**
     * 
     * @type {Array<Task>}
     * @memberof Workflow
     */
    tasks?: Array<Task>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Workflow
     */
    input?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Workflow
     */
    output?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    correlationId?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    reRunFromWorkflowId?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    reasonForIncompletion?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    event?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Workflow
     */
    taskToDomain?: { [key: string]: string; };
    /**
     * 
     * @type {Set<string>}
     * @memberof Workflow
     */
    failedReferenceTaskNames?: Set<string>;
    /**
     * 
     * @type {WorkflowDef}
     * @memberof Workflow
     */
    workflowDefinition?: WorkflowDef;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    externalInputPayloadStoragePath?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    externalOutputPayloadStoragePath?: string;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    priority?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Workflow
     */
    variables?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    lastRetriedTime?: number;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    startTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    workflowName?: string;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    workflowVersion?: number;
}

/**
* @export
* @enum {string}
*/
export enum WorkflowStatusEnum {
    Running = 'RUNNING',
    Completed = 'COMPLETED',
    Failed = 'FAILED',
    TimedOut = 'TIMED_OUT',
    Terminated = 'TERMINATED',
    Paused = 'PAUSED'
}

export function WorkflowFromJSON(json: any): Workflow {
    return WorkflowFromJSONTyped(json, false);
}

export function WorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workflow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ownerApp': !exists(json, 'ownerApp') ? undefined : json['ownerApp'],
        'createTime': !exists(json, 'createTime') ? undefined : json['createTime'],
        'updateTime': !exists(json, 'updateTime') ? undefined : json['updateTime'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'workflowId': !exists(json, 'workflowId') ? undefined : json['workflowId'],
        'parentWorkflowId': !exists(json, 'parentWorkflowId') ? undefined : json['parentWorkflowId'],
        'parentWorkflowTaskId': !exists(json, 'parentWorkflowTaskId') ? undefined : json['parentWorkflowTaskId'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskFromJSON)),
        'input': !exists(json, 'input') ? undefined : json['input'],
        'output': !exists(json, 'output') ? undefined : json['output'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'reRunFromWorkflowId': !exists(json, 'reRunFromWorkflowId') ? undefined : json['reRunFromWorkflowId'],
        'reasonForIncompletion': !exists(json, 'reasonForIncompletion') ? undefined : json['reasonForIncompletion'],
        'event': !exists(json, 'event') ? undefined : json['event'],
        'taskToDomain': !exists(json, 'taskToDomain') ? undefined : json['taskToDomain'],
        'failedReferenceTaskNames': !exists(json, 'failedReferenceTaskNames') ? undefined : json['failedReferenceTaskNames'],
        'workflowDefinition': !exists(json, 'workflowDefinition') ? undefined : WorkflowDefFromJSON(json['workflowDefinition']),
        'externalInputPayloadStoragePath': !exists(json, 'externalInputPayloadStoragePath') ? undefined : json['externalInputPayloadStoragePath'],
        'externalOutputPayloadStoragePath': !exists(json, 'externalOutputPayloadStoragePath') ? undefined : json['externalOutputPayloadStoragePath'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'variables': !exists(json, 'variables') ? undefined : json['variables'],
        'lastRetriedTime': !exists(json, 'lastRetriedTime') ? undefined : json['lastRetriedTime'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'workflowName': !exists(json, 'workflowName') ? undefined : json['workflowName'],
        'workflowVersion': !exists(json, 'workflowVersion') ? undefined : json['workflowVersion'],
    };
}

export function WorkflowToJSON(value?: Workflow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ownerApp': value.ownerApp,
        'createTime': value.createTime,
        'updateTime': value.updateTime,
        'createdBy': value.createdBy,
        'updatedBy': value.updatedBy,
        'status': value.status,
        'endTime': value.endTime,
        'workflowId': value.workflowId,
        'parentWorkflowId': value.parentWorkflowId,
        'parentWorkflowTaskId': value.parentWorkflowTaskId,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskToJSON)),
        'input': value.input,
        'output': value.output,
        'correlationId': value.correlationId,
        'reRunFromWorkflowId': value.reRunFromWorkflowId,
        'reasonForIncompletion': value.reasonForIncompletion,
        'event': value.event,
        'taskToDomain': value.taskToDomain,
        'failedReferenceTaskNames': value.failedReferenceTaskNames,
        'workflowDefinition': WorkflowDefToJSON(value.workflowDefinition),
        'externalInputPayloadStoragePath': value.externalInputPayloadStoragePath,
        'externalOutputPayloadStoragePath': value.externalOutputPayloadStoragePath,
        'priority': value.priority,
        'variables': value.variables,
        'lastRetriedTime': value.lastRetriedTime,
        'startTime': value.startTime,
        'workflowName': value.workflowName,
        'workflowVersion': value.workflowVersion,
    };
}

